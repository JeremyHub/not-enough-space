// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { ClientConnected } from "./client_connected_reducer.ts";
export { ClientConnected };
import { IdentityDisconnected } from "./identity_disconnected_reducer.ts";
export { IdentityDisconnected };
import { SacrificeHealthForMoonReducer } from "./sacrifice_health_for_moon_reducer_reducer.ts";
export { SacrificeHealthForMoonReducer };
import { SetDirVec } from "./set_dir_vec_reducer.ts";
export { SetDirVec };
import { Tick } from "./tick_reducer.ts";
export { Tick };

// Import and reexport all table handle types
import { BitTableHandle } from "./bit_table.ts";
export { BitTableHandle };
import { MetadataTableHandle } from "./metadata_table.ts";
export { MetadataTableHandle };
import { MoonTableHandle } from "./moon_table.ts";
export { MoonTableHandle };
import { TickMetaTableHandle } from "./tick_meta_table.ts";
export { TickMetaTableHandle };
import { TickScheduleTableHandle } from "./tick_schedule_table.ts";
export { TickScheduleTableHandle };
import { UserTableHandle } from "./user_table.ts";
export { UserTableHandle };

// Import and reexport all types
import { Bit } from "./bit_type.ts";
export { Bit };
import { Color } from "./color_type.ts";
export { Color };
import { Metadata } from "./metadata_type.ts";
export { Metadata };
import { Moon } from "./moon_type.ts";
export { Moon };
import { OrbitState } from "./orbit_state_type.ts";
export { OrbitState };
import { TickMeta } from "./tick_meta_type.ts";
export { TickMeta };
import { TickSchedule } from "./tick_schedule_type.ts";
export { TickSchedule };
import { User } from "./user_type.ts";
export { User };

const REMOTE_MODULE = {
  tables: {
    bit: {
      tableName: "bit",
      rowType: Bit.getTypeScriptAlgebraicType(),
      primaryKey: "bitId",
    },
    metadata: {
      tableName: "metadata",
      rowType: Metadata.getTypeScriptAlgebraicType(),
    },
    moon: {
      tableName: "moon",
      rowType: Moon.getTypeScriptAlgebraicType(),
      primaryKey: "moonId",
    },
    tick_meta: {
      tableName: "tick_meta",
      rowType: TickMeta.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    tick_schedule: {
      tableName: "tick_schedule",
      rowType: TickSchedule.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    user: {
      tableName: "user",
      rowType: User.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
    },
  },
  reducers: {
    client_connected: {
      reducerName: "client_connected",
      argsType: ClientConnected.getTypeScriptAlgebraicType(),
    },
    identity_disconnected: {
      reducerName: "identity_disconnected",
      argsType: IdentityDisconnected.getTypeScriptAlgebraicType(),
    },
    sacrifice_health_for_moon_reducer: {
      reducerName: "sacrifice_health_for_moon_reducer",
      argsType: SacrificeHealthForMoonReducer.getTypeScriptAlgebraicType(),
    },
    set_dir_vec: {
      reducerName: "set_dir_vec",
      argsType: SetDirVec.getTypeScriptAlgebraicType(),
    },
    tick: {
      reducerName: "tick",
      argsType: Tick.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "ClientConnected", args: ClientConnected }
| { name: "IdentityDisconnected", args: IdentityDisconnected }
| { name: "SacrificeHealthForMoonReducer", args: SacrificeHealthForMoonReducer }
| { name: "SetDirVec", args: SetDirVec }
| { name: "Tick", args: Tick }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  onClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("client_connected", callback);
  }

  removeOnClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("client_connected", callback);
  }

  onIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_disconnected", callback);
  }

  removeOnIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_disconnected", callback);
  }

  sacrificeHealthForMoonReducer() {
    this.connection.callReducer("sacrifice_health_for_moon_reducer", new Uint8Array(0), this.setCallReducerFlags.sacrificeHealthForMoonReducerFlags);
  }

  onSacrificeHealthForMoonReducer(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("sacrifice_health_for_moon_reducer", callback);
  }

  removeOnSacrificeHealthForMoonReducer(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("sacrifice_health_for_moon_reducer", callback);
  }

  setDirVec(dirVecX: number, dirVecY: number) {
    const __args = { dirVecX, dirVecY };
    let __writer = new BinaryWriter(1024);
    SetDirVec.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_dir_vec", __argsBuffer, this.setCallReducerFlags.setDirVecFlags);
  }

  onSetDirVec(callback: (ctx: ReducerEventContext, dirVecX: number, dirVecY: number) => void) {
    this.connection.onReducer("set_dir_vec", callback);
  }

  removeOnSetDirVec(callback: (ctx: ReducerEventContext, dirVecX: number, dirVecY: number) => void) {
    this.connection.offReducer("set_dir_vec", callback);
  }

  tick(tickSchedule: TickSchedule) {
    const __args = { tickSchedule };
    let __writer = new BinaryWriter(1024);
    Tick.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("tick", __argsBuffer, this.setCallReducerFlags.tickFlags);
  }

  onTick(callback: (ctx: ReducerEventContext, tickSchedule: TickSchedule) => void) {
    this.connection.onReducer("tick", callback);
  }

  removeOnTick(callback: (ctx: ReducerEventContext, tickSchedule: TickSchedule) => void) {
    this.connection.offReducer("tick", callback);
  }

}

export class SetReducerFlags {
  sacrificeHealthForMoonReducerFlags: CallReducerFlags = 'FullUpdate';
  sacrificeHealthForMoonReducer(flags: CallReducerFlags) {
    this.sacrificeHealthForMoonReducerFlags = flags;
  }

  setDirVecFlags: CallReducerFlags = 'FullUpdate';
  setDirVec(flags: CallReducerFlags) {
    this.setDirVecFlags = flags;
  }

  tickFlags: CallReducerFlags = 'FullUpdate';
  tick(flags: CallReducerFlags) {
    this.tickFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get bit(): BitTableHandle {
    return new BitTableHandle(this.connection.clientCache.getOrCreateTable<Bit>(REMOTE_MODULE.tables.bit));
  }

  get metadata(): MetadataTableHandle {
    return new MetadataTableHandle(this.connection.clientCache.getOrCreateTable<Metadata>(REMOTE_MODULE.tables.metadata));
  }

  get moon(): MoonTableHandle {
    return new MoonTableHandle(this.connection.clientCache.getOrCreateTable<Moon>(REMOTE_MODULE.tables.moon));
  }

  get tickMeta(): TickMetaTableHandle {
    return new TickMetaTableHandle(this.connection.clientCache.getOrCreateTable<TickMeta>(REMOTE_MODULE.tables.tick_meta));
  }

  get tickSchedule(): TickScheduleTableHandle {
    return new TickScheduleTableHandle(this.connection.clientCache.getOrCreateTable<TickSchedule>(REMOTE_MODULE.tables.tick_schedule));
  }

  get user(): UserTableHandle {
    return new UserTableHandle(this.connection.clientCache.getOrCreateTable<User>(REMOTE_MODULE.tables.user));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;

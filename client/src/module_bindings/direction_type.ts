// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";
// A namespace for generated variants and helper functions.
export namespace Direction {
  // These are the generated variant types for each variant of the tagged union.
  // One type is generated per variant and will be used in the `value` field of
  // the tagged union.
  export type N = { tag: "N" };
  export type Ne = { tag: "Ne" };
  export type E = { tag: "E" };
  export type Se = { tag: "Se" };
  export type S = { tag: "S" };
  export type Sw = { tag: "Sw" };
  export type W = { tag: "W" };
  export type Nw = { tag: "Nw" };
  export type Brake = { tag: "Brake" };

  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const N = { tag: "N" };
  export const NE = { tag: "NE" };
  export const E = { tag: "E" };
  export const SE = { tag: "SE" };
  export const S = { tag: "S" };
  export const SW = { tag: "SW" };
  export const W = { tag: "W" };
  export const NW = { tag: "NW" };
  export const Brake = { tag: "Brake" };

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant("N", AlgebraicType.createProductType([])),
      new SumTypeVariant("NE", AlgebraicType.createProductType([])),
      new SumTypeVariant("E", AlgebraicType.createProductType([])),
      new SumTypeVariant("SE", AlgebraicType.createProductType([])),
      new SumTypeVariant("S", AlgebraicType.createProductType([])),
      new SumTypeVariant("SW", AlgebraicType.createProductType([])),
      new SumTypeVariant("W", AlgebraicType.createProductType([])),
      new SumTypeVariant("NW", AlgebraicType.createProductType([])),
      new SumTypeVariant("Brake", AlgebraicType.createProductType([])),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: Direction): void {
      Direction.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): Direction {
      return Direction.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

// The tagged union or sum type for the algebraic type `Direction`.
export type Direction = Direction.N | Direction.Ne | Direction.E | Direction.Se | Direction.S | Direction.Sw | Direction.W | Direction.Nw | Direction.Brake;

export default Direction;


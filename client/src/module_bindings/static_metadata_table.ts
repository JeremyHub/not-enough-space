// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.2.0 (commit fb41e50eb73573b70eea532aeb6158eaac06fae0).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
	AlgebraicType,
	AlgebraicValue,
	BinaryReader,
	BinaryWriter,
	ConnectionId,
	DbConnectionBuilder,
	DbConnectionImpl,
	Identity,
	ProductType,
	ProductTypeElement,
	SubscriptionBuilderImpl,
	SumType,
	SumTypeVariant,
	TableCache,
	TimeDuration,
	Timestamp,
	deepEqual,
	type CallReducerFlags,
	type DbContext,
	type ErrorContextInterface,
	type Event,
	type EventContextInterface,
	type ReducerEventContextInterface,
	type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
import { StaticMetadata } from "./static_metadata_type";
import {
	type EventContext,
	type Reducer,
	RemoteReducers,
	RemoteTables,
} from ".";

/**
 * Table handle for the table `static_metadata`.
 *
 * Obtain a handle from the [`staticMetadata`] property on [`RemoteTables`],
 * like `ctx.db.staticMetadata`.
 *
 * Users are encouraged not to explicitly reference this type,
 * but to directly chain method calls,
 * like `ctx.db.staticMetadata.on_insert(...)`.
 */
export class StaticMetadataTableHandle {
	tableCache: TableCache<StaticMetadata>;

	constructor(tableCache: TableCache<StaticMetadata>) {
		this.tableCache = tableCache;
	}

	count(): number {
		return this.tableCache.count();
	}

	iter(): Iterable<StaticMetadata> {
		return this.tableCache.iter();
	}

	onInsert = (cb: (ctx: EventContext, row: StaticMetadata) => void) => {
		return this.tableCache.onInsert(cb);
	};

	removeOnInsert = (cb: (ctx: EventContext, row: StaticMetadata) => void) => {
		return this.tableCache.removeOnInsert(cb);
	};

	onDelete = (cb: (ctx: EventContext, row: StaticMetadata) => void) => {
		return this.tableCache.onDelete(cb);
	};

	removeOnDelete = (cb: (ctx: EventContext, row: StaticMetadata) => void) => {
		return this.tableCache.removeOnDelete(cb);
	};
}

// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";
import { Color as __Color } from "./color_type";
import { OrbitState as __OrbitState } from "./orbit_state_type";

export type Moon = {
  moonId: number,
  colIndex: number,
  x: number,
  y: number,
  dx: number,
  dy: number,
  dirVecX: number,
  dirVecY: number,
  color: __Color,
  health: number,
  size: number,
  orbiting: Identity | undefined,
  orbitAngle: number,
  orbitState: __OrbitState | undefined,
  orbitRadius: number,
  targetColor: __Color | undefined,
  orbitalVelocity: number | undefined,
  isOrbiting: boolean,
};

/**
 * A namespace for generated helper functions.
 */
export namespace Moon {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createProductType([
      new ProductTypeElement("moonId", AlgebraicType.createI32Type()),
      new ProductTypeElement("colIndex", AlgebraicType.createI32Type()),
      new ProductTypeElement("x", AlgebraicType.createF32Type()),
      new ProductTypeElement("y", AlgebraicType.createF32Type()),
      new ProductTypeElement("dx", AlgebraicType.createF32Type()),
      new ProductTypeElement("dy", AlgebraicType.createF32Type()),
      new ProductTypeElement("dirVecX", AlgebraicType.createF32Type()),
      new ProductTypeElement("dirVecY", AlgebraicType.createF32Type()),
      new ProductTypeElement("color", __Color.getTypeScriptAlgebraicType()),
      new ProductTypeElement("health", AlgebraicType.createF32Type()),
      new ProductTypeElement("size", AlgebraicType.createF32Type()),
      new ProductTypeElement("orbiting", AlgebraicType.createOptionType(AlgebraicType.createIdentityType())),
      new ProductTypeElement("orbitAngle", AlgebraicType.createF32Type()),
      new ProductTypeElement("orbitState", AlgebraicType.createOptionType(__OrbitState.getTypeScriptAlgebraicType())),
      new ProductTypeElement("orbitRadius", AlgebraicType.createF32Type()),
      new ProductTypeElement("targetColor", AlgebraicType.createOptionType(__Color.getTypeScriptAlgebraicType())),
      new ProductTypeElement("orbitalVelocity", AlgebraicType.createOptionType(AlgebraicType.createF32Type())),
      new ProductTypeElement("isOrbiting", AlgebraicType.createBoolType()),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: Moon): void {
    Moon.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): Moon {
    return Moon.getTypeScriptAlgebraicType().deserialize(reader);
  }

}


